/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    /*
    int minDepth(TreeNode* root){
        if(!root) return 0;
        //if(!root->left) return minDepth(root->right)+1;
        //if(!root->right) return minDepth(root->left)+1;
        return min(minDepth(root->left), minDepth(root->right))+1;
    }
    
    int maxDepth(TreeNode* root){
        if(!root) return 0;
        return max(maxDepth(root->left), maxDepth(root->right))+1;
    }
    
    
    bool isBalanced(TreeNode* root) {
        if(!root) return true;
        else{ 
            cout<<maxDepth(root)<<endl;
            
            cout<<minDepth(root)<<endl;
            
            return (maxDepth(root)-minDepth(root))<2;
        }
             //return (!root) ? true: traverse(root,0,1000000);
    }*/
    
    int depth(TreeNode* root){
        if(!root) return 0;
        else return max(depth(root->left), depth(root->right))+1;
    }
    
    bool isBalanced(TreeNode* root){
        if(!root) return true;
        
        if(abs(depth(root->left)-depth(root->right))>=2) return false;
        
        return isBalanced(root->left) && isBalanced(root->right);

        
        
    }
};
