class Solution {
public:
    
    /*bool isSafe(vector<vector<int>> nQ, int i, int j){
        
        for(int k=0; k)
        
        for(int i=0; i<nQ.size(); i++){
            for(int j=0; j<nQ[0].size(); j++){
                if(nQ[i][j]==1){
                    for(int k=i)
                }    
            }    
        }
    }*/
    
    // Function to check if two queens threaten each other or not
    bool isSafe(vector<vector<int>> mat, int r, int c)
    {
        // return false if two queens share the same column
        for (int i = 0; i < r; i++)
            if (mat[i][c] == 1)
                return false;

        // return false if two queens share the same \ diagonal
        for (int i = r, j = c; i >= 0 && j >= 0; i--, j--)
            if (mat[i][j] == 1)
                return false;

        // return false if two queens share the same / diagonal
        for (int i = r, j = c; i >= 0 && j < mat.size(); i--, j++)
            if (mat[i][j] == 1)
                return false;

        return true;
    }
    
    void nQueen(vector<vector<int>> mat, vector<vector<string>>& result, int r, int N)
    {
        //cout<<r<<" "<<N<<endl;
        // if N queens are placed successfully, print the solution
        if (r == N)
        {
            /*for (int i = 0; i < N; i++) 
            {
                for (int j = 0; j < N; j++)
                    cout << mat[i][j] << " ";
                cout << endl;
            }
            cout << endl;
            */
            vector<string> rows;
            for(int i=0; i<N; i++){
                string s="";
                for(int j=0; j<N; j++){
                    //cout<<mat[i][j]<<" ";
                    if(mat[i][j]==1) s+="Q";
                    else s+=".";
                }
                rows.push_back(s);
                //cout<<endl;
            }
            result.push_back(rows);
            
            return;
        }

        // place Queen at every square in current row r
        // and recurse for each valid movement    
        for (int i = 0; i < N; i++) 
        {
            // if no two queens threaten each other
            if (isSafe(mat, r, i)) 
            {
                // place queen on current square
                mat[r][i] = 1;

                // recurse for next row
                nQueen(mat, result, r + 1, N);

                // backtrack and remove queen from current square
                mat[r][i] = 0;
            }
        }
    }

    void dfs(vector<vector<int>> nQ, vector<vector<string>>& result, int r, int n){
        
        cout<<r<<" "<<n<<endl;
        
        if(r==n) {
            
            vector<string> rows;
            for(int i=0; i<n; i++){
                string s="";
                for(int j=0; j<n; j++){
                    cout<<nQ[i][j]<<" ";
                    if(nQ[i][j]==1) s+="Q";
                    else s+=".";
                }
                rows.push_back(s);
                cout<<endl;
            }
            result.push_back(rows);
            
            return;
        }
        
        for(int i=0; i<n; i++){
            if(isSafe(nQ, r, i)==true){
                nQ[r][i]==1;
                dfs(nQ, result, r+1, n);
                nQ[r][i]==0;
            }      
        }
            
        
    }
    
    vector<vector<string>> solveNQueens(int n) {
        
        
        vector<vector<int>> nQ (n, vector <int> (n,0) );
        
        vector<vector<string>> result;
        
        if(n==0) return result;
        
        nQueen(nQ, result, 0, n);
        //dfs(nQ, result, 0, n);
        
        return result;
        
    }
};
